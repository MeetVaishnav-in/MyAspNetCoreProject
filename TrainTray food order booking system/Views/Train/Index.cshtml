@model TrainTray_food_order_booking_system.Models.TrainStatusRequest

@{
    ViewData["Title"] = "Train Status";
}

<h2 style="text-align:center">Train Status</h2>

<style>
    
   
    form {
        text-align:center;
        font-family: Arial, sans-serif;
        margin-bottom: 20px;
        padding: 20px;
        background: #fff;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        display: inline-block;
        border-radius: 8px;
    }

    input[type="text"] {
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 200px;
    }

    button {
        padding: 10px 15px;
        font-size: 16px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        button:hover {
            background-color: #0056b3;
        }

    .error-message {
        color: red;
        font-weight: bold;
        margin-top: 10px;
    }

    .train-info {
        background: #fff;
        padding: 15px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        display: inline-block;
        border-radius: 8px;
        text-align: left;
        max-width: 600px;
        margin: auto;
    }

        .train-info h3 {
            color: #007bff;
        }

    table {
        font-family: Arial, sans-serif;
        width: 90%;
        margin: 20px auto;
        border-collapse: collapse;
        background: white;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }

    th, td {
        padding: 10px;
        text-align: center;
        border: 1px solid #ddd;
    }

    th {
        background-color: #007bff;
        color: white;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #ddd;
        cursor: pointer;
    }
</style>
<div style="text-align:center">
    <form method="get" asp-action="Index" asp-controller="Train" >
        <label for="trainNumber">Train Number:</label>
        <input type="text" id="trainNumber" name="TrainNumber" required />
        <button type="submit">Get Train Status</button>
    </form>
</div>
    

    @if (ViewBag.Error != null)
    {
        <div class="error-message">
            <strong>Error:</strong> @ViewBag.Error
        </div>
    }

    @if (ViewBag.TrainStatus != null)
    {
        var currentStation = "Surat";  // Replace with dynamic value if available
        var currentTime = DateTime.Now.ToString("HH:mm"); // Get current time in HH:mm format
        var trainStatus = ViewBag.TrainStatus as TrainTray_food_order_booking_system.Models.TrainStatusResponse;

    <h4 style="text-align:center">Train Stations</h4>
        <table>
            <tr>
                <div class="train-info" style="display: table;">
                    <h3>@trainStatus.TrainName</h3>
                    <p><strong>Status:</strong> @trainStatus.Message</p>
                    <p><strong>Last Updated:</strong> @trainStatus.UpdatedTime</p>
                </div>
            </tr>
            <tr>
                <th></th>
                <th>Station Name</th>
                <th>Distance</th>
                <th>Timing</th>
                <th>Delay</th>
                <th>Platform</th>
                <th>Halt</th>
            </tr>
            @foreach (var station in trainStatus.Stations)
            {
                <tr onclick="redirectToStationDetails('@station.StationName', '@station.Distance', '@station.Timing', '@station.Delay', '@station.Platform', '@station.Halt')">
                    <td>
                        <div class="station">
                            <input type="radio" class="station-dot" id="station_@station.StationName" disabled />
                            <label for="station_@station.StationName" hidden>@station.StationName - @station.Timing</label>
                        </div>
                    </td>
                    <td>@station.StationName</td>
                    <td>@station.Distance</td>
                    <td>@station.Timing</td>
                    <td>@station.Delay</td>
                    <td>@station.Platform</td>
                    <td>@station.Halt</td>
                </tr>
            }
        </table>
    }


<script>
    function redirectToStationDetails(stationName, distance, timing, delay, platform, halt) {
         
        
        const url = '@Url.Action("StationDetails", "Train")' +
            `?stationName=${encodeURIComponent(stationName)}` +
            `&distance=${encodeURIComponent(distance)}` +
            `&timing=${encodeURIComponent(timing)}` +
            `&delay=${encodeURIComponent(delay)}` +
            `&platform=${encodeURIComponent(platform)}` +
            `&halt=${encodeURIComponent(halt)}`;
            
        window.location.href = url;
    }
  
        function updateStationProgress() {
            let now = new Date();
            let currentStation = "Surat"; // Replace with dynamic station if available
            let stopChecking = false;
            document.querySelectorAll(".station").forEach(station => {
                let labelText = station.querySelector("label").innerText.trim();
                let [stationName, times] = labelText.split(" - ");
                let stationTime = times.substring(0, 5); // Extract arrival time (first 5 characters)

                let [hours, minutes] = stationTime.split(":").map(Number);
                let stationTimeDate = new Date();
                stationTimeDate.setHours(hours, minutes, 0, 0);

                let dot = station.querySelector(".station-dot");
                if (stopChecking) {
                dot.checked = false; // Future stations remain unchecked
                return;
            }
                if (stationTimeDate < now) {
                    dot.checked = true; // ✅ Mark past stations
                }
                else if (stationName.trim() === currentStation) {
                    dot.checked = true; // 🔵 Highlight current station

                    dot.classList.add("current-station");
                }
                else {
                    dot.checked = false; // ❌ Future stations remain unchecked
                stopChecking = true;
                }
            });

            setTimeout(updateStationProgress, 60000); // Refresh every minute
        }

        updateStationProgress();
</script>

<style>
    .station-progress {
        flex-direction: column;
        align-items: start;
        padding: 10px;
    }

    .station {
        font-family: Arial, sans-serif;
        align-items: center;
        gap: 10px;
        margin: 5px 0;
    }

    .station-dot {
        width: 20px;
        height: 20px;
        appearance: none;
        border: 2px solid #ccc;
        border-radius: 50%;
        transition: 0.3s;
    }

        .station-dot:checked {
            background-color: red;
            border-color: red;
        }

    .current-station {
        background-color: blue !important;
        border-color: blue !important;
    }
</style>